{"version":3,"sources":["constants.js","actions.js","api/api.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js","components/Card.js","components/CardList.js"],"names":["CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","SearchBox","searchfield","searchChange","className","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","App","onRequestRobots","robots","searchField","onSearchChange","filteredRobots","isPending","filter","robot","name","toLowerCase","includes","Card_Loadable","loadable","cacheKey","fallback","ErrorBoundry","connect","searchRobots","event","text","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","Card","email","id","alt","srcSet","CardList","map","user","i"],"mappings":"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","file":"static/js/main.fea77116.chunk.js","sourcesContent":["export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { apiCall } from './api/api'\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React, { Component, Suspense } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\nimport loadable from '@loadable/component'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport './App.css';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    const Card_Loadable = loadable(props => import('../components/CardList'),{\n      cacheKey: props => props.robot,\n    })\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          \n          <Suspense fallback={ <h1>Loading :</h1>}>\n                <ErrorBoundry>\n              <Card_Loadable robots={filteredRobots} />\n            </ErrorBoundry>\n         \n          </Suspense>\n            \n        </Scroll>\n      </div>\n    );\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: true\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { requestRobots, searchRobots } from './reducers'\n\nimport './index.css';\n\nconst logger = createLogger() \n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots'  srcSet= {`https://robohash.org/${id}.jpeg?100x100` } />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport loadable from '@loadable/component'\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;"],"sourceRoot":""}